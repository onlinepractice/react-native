
Updates for Android Studio are available from the following release channels:

Canary Channel: These are bleeding-edge releases, updated roughly weekly. Although these builds are subject to more bugs, they do get tested and we want to offer early access so you can try new features and provide feedback. This channel is not recommended for production development.
Dev Channel: These are hand-picked canary builds that survived a full round of internal testing.
Beta Channel: These are release candidates based on stable canary builds, released to get feedback before going into the stable channel.
Stable Channel: The official stable release that is available for download at developer.android.com/studio.
By default, Android Studio offers updates from the Stable Channel. If you'd like to try one of the other versions of Android Studio—known collectively as the Preview Channels—you can choose to receive updates from one of those instead.

To change your update channel, proceed as follows:

Open the Preferences window by clicking File > Settings (on Mac, Android Studio > Preferences).
In the left panel, click Appearance & Behavior > System Settings > Updates.
Be sure that Automatically check for updates is checked, then select a channel from the drop-down list (see figure 1).
Click Apply or OK.


Update Your Tools with the SDK Manager
The Android SDK Manager helps you download the SDK tools, platforms, and other components you need to develop your apps. Once downloaded, you can find each package in the directory indicated as the Android SDK Location, shown in figure 2.

To open the SDK Manager from Android Studio, click Tools > Android > SDK Manager or click SDK Manager  in the toolbar. If you're not using Android Studio, you can download tools using the sdkmanager command-line tool.

When an update is available for a package you already have, a dash  appears in the check box next to the package.

To update an item or install a new one, click the check box so it shows a checkmark.
To uninstall a package, click to clear the check box.
Pending updates are indicated in the left column with a download icon . Pending removals are indicated with a red cross .

To update the selected packages, click Apply or OK, then agree to any license agreements.


Recommended packages
You should give special consideration to the following tools in the SDK Tools tab:

Android SDK Build-Tools
Required. Includes tools to build Android apps. See the SDK Build Tools Release Notes.
Android SDK Platform-Tools
Required. Includes various tools required by the Android platform, including the adb tool.
Android SDK Tools
Required. Includes essential tools such as ProGuard. See the SDK Tools Release Notes.
Android Emulator
Recommended. A QEMU-based device-emulation tool that you can use to debug and test your applications in an actual Android runtime environment. See the Android Emulator Release Notes.
Support Repository
Recommended. Includes local Maven repository for Support libraries, which provide an extended set of APIs that are compatible with most versions of Android. It's required for products such as Android Wear, Android TV, and Google Cast. Also included are libraries for Google APIs that provide a variety of services such as Firebase, Google Maps, Games achievements and leaderboards, and much more.
In the SDK Platforms tab, you must also install at least one version of the Android platform. Each version provides several different packages. To download only those that are required, click the check box next to the version name.

To see all available packages for each Android platform, click Show Package Details at the bottom of the window. Within each platform version, you'll find the following packages:

Android SDK Platform
Required. At least one platform is required in your environment so you're able to compile your application. In order to provide the best user experience on the latest devices, use the latest platform version as your build target. You'll still be able to run your app on older versions, but you must build against the latest version in order to use new features when running on devices with the latest version of Android.
Intel or ARM System Images
Recommended. The system image is required in order to run the Android Emulator. Each platform version contains the supported system images. You can also download system images later when creating Android Virtual Devices (AVDs) in the AVD Manager. Select either Intel or ARM based on your development computer's processor.
Note: If you plan to use APIs from Google Play services, you must use the Google APIs System Image.

The above list is not comprehensive and you can add other sites to download additional packages from third parties.

In some cases, an SDK package may require a specific minimum revision of another tool. If so, the SDK Manager notifies you with a warning and adds the dependencies to your list of downloads.

Tip: You can also customize the build.gradle file so each project uses a specific build chain and compilation options. For more information see, Configuring Gradle Builds.

Edit or add SDK tool sites
To manage which SDK sites Android Studio checks for Android tools and third party tool updates, click the SDK Update Sites tab. You can add other sites that host their own tools, then download the packages from those sites.

For example, a mobile carrier or device manufacturer might offer additional API libraries that are supported by their own Android-powered devices. To develop using their libraries, you can install their Android SDK package by adding their SDK tools URL to the SDK Manager in the SDK Update Sites.

If a carrier or device manufacturer has hosted an SDK add-on repository file on their website, follow these steps to add their site to the Android SDK Manager:

Click the SDK Update Sites tab.
Click Add   at the bottom of the window.
Enter the name and URL of the third party site, then click OK.
Make sure the checkbox is selected in the Enabled column.
Click Apply or OK .
Any SDK packages available from the site now appear in the SDK Platforms or SDK Tools tabs, as appropriate.

Auto-download missing packages with Gradle
When you run a build from the command line, Gradle can automatically download missing SDK packages that a project depends on, as long as the corresponding SDK license agreements have already been accepted using the SDK Manager.

When you accept the license agreements using the SDK Manager, Android Studio creates a licenses directory inside the SDK home directory. This licenses directory is necessary for Gradle to auto-download missing packages.

Note: Accepting the license agreements using the android command line tool does not create this licenses directory. You must first accept the agreements using the SDK Manager to be able to use this feature.

If you have accepted the license agreements on one workstation, but wish to build your projects on a different one, you can export your licenses by copying over the accepted licenses directory. To copy the licenses to another machine, follow these steps:

On a machine with Android Studio installed, click Tools > Android > SDK Manager. At the top of the window, note the Android SDK Location.
Navigate to that directory and locate the licenses/ directory inside it. (If you do not see a licenses/ directory, return to Android Studio and update your SDK tools, making sure to accept the license agreements. When you return to the Android SDK home directory, you should now see the directory.)
Copy the entire licenses/ directory and paste it into the Android SDK home directory on the machine where you wish to build your projects.
Gradle will now be able to automatically download missing packages your project depends on.

Note that this feature is automatically disabled for builds you run from Android Studio, as the SDK manager handles downloading missing packages for the IDE. You can also manually disable this feature by setting android.builder.sdkDownload=false in the gradle.properties file for your project.
